# Brainf*ck Interpreter for CHIP-8, by el_seyf

:alias fk_pc_l      v4
:alias fk_pc_h      v5
:alias fk_cell_p_l  v6
:alias fk_cell_p_h  v7
:alias fk_instr     v8
:alias fk_out_x     v9
:alias fk_out_y     va
:alias fk_bracket_c vb

:const fk_cell      0x0000
:const fk_cell_size 0x0800
:calc fk_cell_l { fk_cell & 0xFF }
:calc fk_cell_h { fk_cell >> 8 }
:calc fk_cell_size_l { fk_cell_size & 0xFF }
:calc fk_cell_size_h { fk_cell_size >> 8 }
:calc fk_cell_size_h_1 { fk_cell_size_h - 1 }

:const FK_RIGHT         0x3E
:const FK_LEFT          0x3C
:const FK_PLUS          0x2B
:const FK_MINUS         0x2D
:const FK_DOT           0x2E
:const FK_COMMA         0x2C
:const FK_BRACKET_LEFT  0x5B
:const FK_BRACKET_RIGHT 0x5D

:org 0x0800
: font
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
    :byte 0x00 0x08 0x08 0x08 0x08 0x00 0x08 0x00
    :byte 0x00 0x36 0x12 0x12 0x00 0x00 0x00 0x00
    :byte 0x00 0x24 0x7E 0x24 0x24 0x7E 0x24 0x00
    :byte 0x08 0x1E 0x28 0x1C 0x0A 0x3C 0x08 0x00
    :byte 0x00 0x22 0x54 0x28 0x14 0x2A 0x44 0x00
    :byte 0x00 0x18 0x24 0x30 0x44 0x46 0x38 0x00
    :byte 0x00 0x18 0x08 0x08 0x00 0x00 0x00 0x00
    :byte 0x00 0x08 0x10 0x10 0x10 0x10 0x08 0x00
    :byte 0x00 0x10 0x08 0x08 0x08 0x08 0x10 0x00
    :byte 0x00 0x22 0x14 0x08 0x14 0x22 0x00 0x00
    :byte 0x00 0x08 0x08 0x3E 0x08 0x08 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x18 0x08 0x08 0x00
    :byte 0x00 0x00 0x00 0x3E 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x08 0x00 0x00
    :byte 0x00 0x02 0x04 0x08 0x10 0x20 0x40 0x00
    :byte 0x00 0x3C 0x46 0x46 0x46 0x46 0x3C 0x00
    :byte 0x00 0x38 0x18 0x18 0x18 0x18 0x18 0x00
    :byte 0x00 0x7C 0x06 0x3C 0x60 0x60 0x7E 0x00
    :byte 0x00 0x78 0x0C 0x7C 0x06 0x06 0x7C 0x00
    :byte 0x00 0x4C 0x4C 0x4C 0x4C 0x7E 0x0C 0x00
    :byte 0x00 0x7C 0x40 0x7C 0x06 0x06 0x7C 0x00
    :byte 0x00 0x3C 0x40 0x7C 0x46 0x46 0x3C 0x00
    :byte 0x00 0x7E 0x06 0x06 0x06 0x06 0x06 0x00
    :byte 0x00 0x3C 0x46 0x3C 0x46 0x46 0x3C 0x00
    :byte 0x00 0x3C 0x46 0x46 0x3E 0x06 0x3C 0x00
    :byte 0x00 0x18 0x18 0x00 0x00 0x18 0x18 0x00
    :byte 0x00 0x18 0x18 0x00 0x18 0x08 0x08 0x00
    :byte 0x00 0x00 0x04 0x08 0x10 0x08 0x04 0x00
    :byte 0x00 0x00 0x3E 0x00 0x3E 0x00 0x00 0x00
    :byte 0x00 0x00 0x20 0x10 0x08 0x10 0x20 0x00
    :byte 0x00 0x1C 0x22 0x22 0x0C 0x00 0x08 0x00
    :byte 0x3C 0x42 0x99 0xA5 0x9E 0x40 0x3F 0x00
    :byte 0x00 0x3C 0x42 0x42 0x7E 0x42 0x42 0x00
    :byte 0x00 0x7C 0x42 0x7C 0x42 0x42 0x7C 0x00
    :byte 0x00 0x3E 0x40 0x40 0x40 0x40 0x3E 0x00
    :byte 0x00 0x7C 0x42 0x42 0x42 0x42 0x7C 0x00
    :byte 0x00 0x7E 0x40 0x7E 0x40 0x40 0x7E 0x00
    :byte 0x00 0x7E 0x40 0x7E 0x40 0x40 0x40 0x00
    :byte 0x00 0x3E 0x40 0x4E 0x42 0x42 0x3E 0x00
    :byte 0x00 0x42 0x42 0x7E 0x42 0x42 0x42 0x00
    :byte 0x00 0x1C 0x08 0x08 0x08 0x08 0x1C 0x00
    :byte 0x00 0x0E 0x04 0x04 0x44 0x44 0x38 0x00
    :byte 0x00 0x42 0x44 0x48 0x58 0x64 0x42 0x00
    :byte 0x00 0x40 0x40 0x40 0x40 0x40 0x7E 0x00
    :byte 0x00 0x42 0x66 0x5A 0x42 0x42 0x42 0x00
    :byte 0x00 0x42 0x62 0x52 0x4A 0x46 0x42 0x00
    :byte 0x00 0x3C 0x42 0x42 0x42 0x42 0x3C 0x00
    :byte 0x00 0x7C 0x42 0x42 0x7C 0x40 0x40 0x00
    :byte 0x00 0x3C 0x42 0x42 0x4A 0x44 0x3A 0x00
    :byte 0x00 0x7C 0x42 0x42 0x7C 0x44 0x42 0x00
    :byte 0x00 0x3E 0x40 0x3C 0x02 0x02 0x7C 0x00
    :byte 0x00 0x3E 0x08 0x08 0x08 0x08 0x08 0x00
    :byte 0x00 0x42 0x42 0x42 0x42 0x42 0x3C 0x00
    :byte 0x00 0x42 0x42 0x42 0x24 0x24 0x18 0x00
    :byte 0x00 0x42 0x42 0x42 0x5A 0x66 0x42 0x00
    :byte 0x00 0x42 0x24 0x18 0x18 0x24 0x42 0x00
    :byte 0x00 0x22 0x14 0x08 0x08 0x08 0x08 0x00
    :byte 0x00 0x7E 0x04 0x08 0x10 0x20 0x7E 0x00
    :byte 0x00 0x18 0x10 0x10 0x10 0x10 0x18 0x00
    :byte 0x00 0x40 0x20 0x10 0x08 0x04 0x02 0x00
    :byte 0x00 0x18 0x08 0x08 0x08 0x08 0x18 0x00
    :byte 0x00 0x08 0x14 0x22 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0x00
    :byte 0x00 0x18 0x10 0x10 0x00 0x00 0x00 0x00
    :byte 0x00 0x00 0x1C 0x02 0x1E 0x22 0x1E 0x00
    :byte 0x00 0x20 0x20 0x2C 0x32 0x22 0x3C 0x00
    :byte 0x00 0x00 0x1E 0x20 0x20 0x20 0x1E 0x00
    :byte 0x00 0x02 0x02 0x1A 0x26 0x22 0x1E 0x00
    :byte 0x00 0x00 0x1C 0x22 0x3C 0x20 0x1E 0x00
    :byte 0x00 0x0C 0x10 0x3C 0x10 0x10 0x10 0x00
    :byte 0x00 0x00 0x1E 0x22 0x1E 0x02 0x3C 0x00
    :byte 0x00 0x20 0x20 0x2C 0x32 0x22 0x22 0x00
    :byte 0x00 0x08 0x00 0x08 0x08 0x08 0x08 0x00
    :byte 0x00 0x04 0x00 0x04 0x04 0x24 0x18 0x00
    :byte 0x00 0x20 0x22 0x24 0x28 0x34 0x22 0x00
    :byte 0x00 0x10 0x08 0x08 0x08 0x08 0x0C 0x00
    :byte 0x00 0x00 0x34 0x2A 0x2A 0x2A 0x2A 0x00
    :byte 0x00 0x00 0x2C 0x32 0x22 0x22 0x22 0x00
    :byte 0x00 0x00 0x1C 0x22 0x22 0x22 0x1C 0x00
    :byte 0x00 0x00 0x3C 0x22 0x32 0x2C 0x20 0x00
    :byte 0x00 0x00 0x1E 0x22 0x26 0x1A 0x02 0x00
    :byte 0x00 0x00 0x20 0x2C 0x32 0x20 0x20 0x00
    :byte 0x00 0x00 0x1E 0x20 0x1C 0x02 0x3C 0x00
    :byte 0x00 0x08 0x3E 0x08 0x08 0x08 0x06 0x00
    :byte 0x00 0x00 0x22 0x22 0x22 0x26 0x1A 0x00
    :byte 0x00 0x00 0x22 0x14 0x14 0x08 0x08 0x00
    :byte 0x00 0x00 0x2A 0x2A 0x2A 0x14 0x14 0x00
    :byte 0x00 0x00 0x22 0x14 0x08 0x14 0x22 0x00
    :byte 0x00 0x00 0x22 0x14 0x08 0x10 0x20 0x00
    :byte 0x00 0x00 0x3E 0x04 0x08 0x10 0x3E 0x00
    :byte 0x08 0x10 0x10 0x20 0x10 0x10 0x08 0x00
    :byte 0x00 0x08 0x08 0x08 0x08 0x08 0x08 0x00
    :byte 0x10 0x08 0x08 0x04 0x08 0x08 0x10 0x00
    :byte 0x00 0x32 0x4C 0x00 0x00 0x00 0x00 0x00
    :byte 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF 0xFF
:calc font_l { font & 0xFF }
:calc font_h { font >> 8 }

: fk_pgm
    :byte 0x2B 0x2B 0x2B 0x2B 0x2B 0x2B 0x2B 0x2B
    :byte 0x5B 0x3E 0x2B 0x2B 0x2B 0x2B 0x5B 0x3E
    :byte 0x2B 0x2B 0x3E 0x2B 0x2B 0x2B 0x3E 0x2B
    :byte 0x2B 0x2B 0x3E 0x2B 0x3C 0x3C 0x3C 0x3C
    :byte 0x2D 0x5D 0x3E 0x2B 0x3E 0x2B 0x3E 0x2D
    :byte 0x3E 0x3E 0x2B 0x5B 0x3C 0x5D 0x3C 0x2D
    :byte 0x5D 0x3E 0x3E 0x2E 0x3E 0x2D 0x2D 0x2D
    :byte 0x2E 0x2B 0x2B 0x2B 0x2B 0x2B 0x2B 0x2B
    :byte 0x2E 0x2E 0x2B 0x2B 0x2B 0x2E 0x3E 0x3E
    :byte 0x2E 0x3C 0x2D 0x2E 0x3C 0x2E 0x2B 0x2B
    :byte 0x2B 0x2E 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D
    :byte 0x2E 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D 0x2D
    :byte 0x2D 0x2E 0x3E 0x3E 0x2B 0x2E 0x3E 0x2B
    :byte 0x2B 0x2E
    :byte 0x5B 0x2B 0x5D 0x2B 0x5B 0x5D
:calc fk_pgm_l { fk_pgm & 0xFF }
:calc fk_pgm_h { fk_pgm >> 8 }

:macro load_i_vx_vy vx vy {
    v0 := vx
    v1 := 0x0F
    v0 &= v1
    v1 := 0xA0
    v0 |= v1
    i := load_i_vx_vy_func
    save v0
    v0 := vy
    save v0
    load_i_vx_vy_func
}
:macro inc_pc {
    fk_pc_l += 1
    if fk_pc_l == 0 then fk_pc_h += 1
}
:macro dec_pc {
    fk_pc_l += -1
    if fk_pc_l == 0xFF then fk_pc_h += -1
}
:macro inc_cell_p {
    fk_cell_p_l += 1
    if fk_cell_p_l == 0 begin
        fk_cell_p_h += 1
        if fk_cell_p_h == fk_cell_size_h then fk_cell_p_h := 0
    end
}
:macro dec_cell_p {
    fk_cell_p_l += -1
    if fk_cell_p_l == 0xFF begin
        fk_cell_p_h += -1
        if fk_cell_p_h == 0xFF then fk_cell_p_h := fk_cell_size_h_1
    end
}
:macro inc_cell {
    load_i_vx_vy fk_cell_p_h fk_cell_p_l
    load v0
    v0 += 1
    v2 := v0
    load_i_vx_vy fk_cell_p_h fk_cell_p_l
    v0 := v2
    save v0
}
:macro dec_cell {
    load_i_vx_vy fk_cell_p_h fk_cell_p_l
    load v0
    v0 += 0xFF
    v2 := v0
    load_i_vx_vy fk_cell_p_h fk_cell_p_l
    v0 := v2
    save v0
}
:macro get_instr {
    v2 := fk_pgm_l
    v3 := fk_pgm_h
    
    v2 += fk_pc_l
    v3 += vf
    v3 += fk_pc_h
    
    load_i_vx_vy v3 v2
    load v0
    fk_instr := v0
}
:macro load_i_font char {
    v2 := char
    v3 := 0
    
    v2 <<= v2
    v1 := vf
    v3 <<= v3
    v3 |= v1
    v2 <<= v2
    v1 := vf
    v3 <<= v3
    v3 |= v1
    v2 <<= v2
    v1 := vf
    v3 <<= v3
    v3 |= v1
    
    v2 += font_l
    v3 += vf
    v3 += font_h
    load_i_vx_vy v3 v2
}
:macro out_byte {
    load_i_vx_vy fk_cell_p_h fk_cell_p_l
    load v0
    v2 := v0
    v3 := 0
    
    v2 <<= v2
    v1 := vf
    v3 <<= v3
    v3 |= v1
    v2 <<= v2
    v1 := vf
    v3 <<= v3
    v3 |= v1
    v2 <<= v2
    v1 := vf
    v3 <<= v3
    v3 |= v1
    
    v2 += font_l
    v3 += vf
    v3 += font_h
    load_i_vx_vy v3 v2
    
    sprite fk_out_x fk_out_y 8
    
    fk_out_x += 8
    if fk_out_x >= 64 begin
        fk_out_x := 0
        fk_out_y += 8
        if fk_out_y >= 32 begin
            clear
            fk_out_y := 0
        end
    end
}

: load_i_vx_vy_func
    i := 0
    return

: main
    v0 := 0
    v1 := 0
    v2 := 0
    v3 := 0
    v4 := 0
    v5 := 0
    v6 := 0
    v7 := 0
    v8 := 70
    i := 0x0000
    loop
        save v7
        v8 += -1
        if v8 == 0 then jump fk_init
    again
    
: fk_init
    fk_pc_h := 0x00
    fk_pc_l := 0x00
    fk_cell_p_h := 0x00
    fk_cell_p_l := 0x00
    fk_out_x := 0x00
    fk_out_y := 0x00
    
loop
    get_instr
    inc_pc
    
    if fk_instr == FK_RIGHT         then fk_instr_right
    if fk_instr == FK_LEFT          then fk_instr_left
    if fk_instr == FK_PLUS          then fk_instr_plus
    if fk_instr == FK_MINUS         then fk_instr_minus
    if fk_instr == FK_DOT           then fk_instr_dot
    if fk_instr == FK_COMMA         then fk_instr_comma
    if fk_instr == FK_BRACKET_LEFT  then fk_instr_bracket_left
    if fk_instr == FK_BRACKET_RIGHT then fk_instr_bracket_right
    
again

: fk_instr_right
    inc_cell_p
    return

: fk_instr_left
    dec_cell_p
    return

: fk_instr_plus
    inc_cell
    return

: fk_instr_minus
    dec_cell
    return

: fk_instr_dot
    out_byte
    return

: fk_instr_comma
    return

: fk_instr_bracket_left
    load_i_vx_vy fk_cell_p_h fk_cell_p_l
    load v0
    if v0 != 0 then return
    
    fk_bracket_c := 1
    loop
        get_instr
        if fk_instr == FK_BRACKET_LEFT  then fk_bracket_c += 1
        if fk_instr == FK_BRACKET_RIGHT then fk_bracket_c += -1
        if fk_bracket_c == 0 then jump fk_instr_bracket_left_end
        inc_pc
    again
    : fk_instr_bracket_left_end
    inc_pc
    return

: fk_instr_bracket_right
    load_i_vx_vy fk_cell_p_h fk_cell_p_l
    load v0
    if v0 == 0 then return
    
    dec_pc
    dec_pc
    fk_bracket_c := 1
    loop
        get_instr
        if fk_instr == FK_BRACKET_RIGHT then fk_bracket_c += 1
        if fk_instr == FK_BRACKET_LEFT  then fk_bracket_c += -1
        if fk_bracket_c == 0 then jump fk_instr_bracket_right_end
        dec_pc
    again
    : fk_instr_bracket_right_end
    inc_pc
    return


